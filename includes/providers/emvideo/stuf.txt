
/**
 * hook emvideo_PROVIDER_extract
 * this is called to extract the video code from a pasted URL or embed code.
 * @param $video_code
 *   an optional string with the pasted URL or embed code
 * @return
 *   either an array of regex expressions to be tested, or a string with the video code to be used
 *   if the hook tests the code itself, it should return either the string of the video code (if matched), or an empty array.
 *   otherwise, the calling function will handle testing the embed code against each regex string in the returned array.
 */
function emvideo_23video_extract($video_code = '') {
  error_log('Whatevs');
  error_log($video_code);
  // http://23video.com/123456
  // http://www.23video.com/123456
  // http://23video.com/channels/hd#6912147
  //<object width="400" height="270"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="movie" value="http://23video.com/moogaloop.swf?clip_id=4106135&amp;server=23video.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" /><embed src="http://23video.com/moogaloop.swf?clip_id=4106135&amp;server=23video.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="270"></embed></object><br /><a href="http://23video.com/4106135">Two Knives One Motive</a> from <a href="http://23video.com/x351">Tyler Capehart</a> on <a href="http://23video.com">23video</a>.
  return array(
    '@23video\.com/moogaloop\.swf\?clip_id\=([^\"\&]+)@i',
    '@23video\.com/[^\"\&\d]*([^\"\&]+)@i',
  );
}

/**
 * hook emvideo_PROVIDER_embedded_link($video_code)
 * returns a link to view the video at the provider's site
 *  @param $video_code
 *    the string containing the video to watch
 *  @return
 *    a string containing the URL to view the video at the original provider's site
 */
function emvideo_23video_embedded_link($video_code) {
  return media_23video_video_url($video_code);
}

/**
 * hook emvideo_PROVIDER_video
 * this actually displays the full/normal-sized video we want, usually on the default page view
 *  @param $video_code
 *    the video code for the video to embed
 *  @param $width
 *    the width to display the video
 *  @param $height
 *    the height to display the video
 *  @param $field
 *    the field info from the requesting node
 *  @param $item
 *    the actual content from the field
 *  @return
 *    the html of the embedded video
 */
function emvideo_23video_video($video_code, $width, $height, $field, $item, $node, $autoplay, $options = array()) {
  $options['width'] = isset($options['width']) ? $options['width'] : $width;
  $options['height'] = isset($options['height']) ? $options['height'] : $height;
  $options['autoplay'] = isset($options['autoplay']) ? $options['autoplay'] : $autoplay;
  return theme('media_23video', $video_code, $options);
}

/**
 * hook emvideo_PROVIDER_video
 * this actually displays the preview-sized video we want, commonly for the teaser
 *  @param $video_code
 *    the video code for the video to embed
 *  @param $width
 *    the width to display the video
 *  @param $height
 *    the height to display the video
 *  @param $field
 *    the field info from the requesting node
 *  @param $item
 *    the actual content from the field
 *  @return
 *    the html of the embedded video
 */
function emvideo_23video_preview($video_code, $width, $height, $field, $item, $node, $autoplay, $options = array()) {
  $options['width'] = isset($options['width']) ? $options['width'] : $width;
  $options['height'] = isset($options['height']) ? $options['height'] : $height;
  $options['autoplay'] = isset($options['autoplay']) ? $options['autoplay'] : $autoplay;
  return theme('media_23video', $video_code, $options);
}


/**
 * hook emvideo_PROVIDER_thumbnail
 * returns the external url for a thumbnail of a specific video
 * TODO: make the args: ($video_code, $field, $item), with $field/$item provided if we need it, but otherwise simplifying things
 *  @param $field
 *    the field of the requesting node
 *  @param $item
 *    the actual content of the field from the requesting node
 *  @return
 *    a URL pointing to the thumbnail
 */
function emvideo_23video_thumbnail($field, $item, $formatter, $node, $width, $height) {
  return media_23video_thumbnail_url($item['value']);
}

/**
 *  Implement hook_emvideo_PROVIDER_content_generate().
 */
function emvideo_23video_content_generate() {
  return array(
    'http://23video.com/1408463',
    'http://23video.com/1040532',
    'http://23video.com/709081',
    'http://23video.com/5565562',
  );
}

/**
 *  Implement hook emvideo_PROVIDER_data_version().
 */
function emvideo_23video_data_version() {
  return MEDIA_23VIDEO_DATA_VERSION;
}

/**
 * Implement hook_emvideo_PROVIDER_data().
 */
function emvideo_23video_data($field, $item) {
  return media_23video_data($item['value']);
}

/**
 * hook emvideo_PROVIDER_duration($item)
 * Returns the duration of the video in seconds.
 *  @param $item
 *    The video item itself, which needs the $data array.
 *  @return
 *    The duration of the video in seconds.
 */
function emvideo_23video_duration($item) {
  return media_23video_duration($item['value']);
}
